#!/usr/bin/env bash

#path=$1
path="/root/oai-deployment-files"
path="/root/oai-deployment-files"
path="/root/oai-deployment-files/"

#echo {\n "insecure-registries" : ["194.177.207.79:5000"]\n} > /etc/docker/daemon.json
#kubectl create secret docker-registry  regcred --docker-server=194.177.207.79:5000 --docker-username=admin --docker-password=password
#kubectl create namespace oai
#kubectl create secret -n oai docker-registry regcred --docker-server=194.177.207.79:5000 --docker-username=admin --docker-password=password

#Install Multus CNI (Daemonset method)
#git clone https://github.com/intel/multus-cni.git && cd multus-cni
#cat ./images/multus-daemonset.yml | kubectl apply -f -
#kubectl label nodes 5g-k8s-1 usb=usrp
#kubectl label nodes 5g-k8s-2 type=rru

kubectl apply -f "${path}/cassandra.yaml" --validate=false
sleep 10
kubectl apply -f "${path}/oai-hss-devel.yaml" --validate=false
sleep 30
kubectl apply -f "${path}/oai-mme-devel.yaml" --validate=false
sleep 10
kubectl apply -f "${path}/oai-spgwc-devel.yaml" --validate=false
sleep 20
kubectl apply -f "${path}/oai-spgwu-devel.yaml" --validate=false
sleep 20
kubectl apply -f "${path}/oai-enb-devel.yaml" --validate=false
#sleep 20
#kubectl create configmap rru-config --from-file=oai-rru-config.yaml -n oai
#kubectl apply -f "${path}/oai-rru-devel.yaml" --validate=false
#kubectl create configmap enb-netconfig --from-file=oai-enb-netconfig.yaml -n oai

#save image to registry
#docker commit f3c440da2202 oai-rcc-devel:latest
#docker image tag oai-rcc-devel:latest 194.177.207.79:5000/oai/oai-rcc-devel:latest
#docker image push 194.177.207.79:5000/oai/oai-rcc-devel:latest


#Node050
#minicom -D  /dev/ttyUSB0
#at+cgdcont=1,"IP","apn.oai.svc.cluster.local","0.0.0.0",0,0
#ifconfig wwan0 192.168.20.2/24 up
#ifconfig wwan0 netmask 255.255.255.0 -arp up
#route add -net 192.168.3.0/24 gw 192.168.20.1
#ping 192.168.3.100

#pods id
#kubectl get pods -n oai |  cut -f 1 -d ' '  | grep oai-enb
#ip net3
#kubectl get pod oai-enb-858b6b6fc8-n2nxh -n oai -o yaml | grep 192.168.18
#kubectl get pods -n oai |  cut -f 1 -d ' '  | grep oai-enb | xargs kubectl -n oai -o yaml get pod | grep 192.168.18
#1.create a thread to read ips 2.select random one ip to send messages
#path: targets/ARCH/ETHERNET/USERSPACE/LIB/eth_udp.c
#https://gitlab.eurecom.fr/oai/openairinterface5g/-/blob/master/openair2/LAYER2/PROTO_AGENT/proto_agent.c
sleep 20
kubectl apply -f "${path}/oai-enb-devel.yaml" --validate=false
#sleep 20
#kubectl create configmap rru-config --from-file=oai-rru-config.yaml -n oai
#kubectl apply -f "${path}/oai-rru-devel.yaml" --validate=false
#kubectl create configmap enb-netconfig --from-file=oai-enb-netconfig.yaml -n oai

#save image to registry
#docker container commit f3c440da2202 oai-rcc-devel:latest
#docker image tag oai-rcc-devel:latest 194.177.207.79:5000/oai/oai-rcc-devel:latest
#docker image push 194.177.207.79:5000/oai/oai-rcc-devel:latest


#Node050
#minicom -D  /dev/ttyUSB0
#at+cgdcont=1,"IP","apn.oai.svc.cluster.local","0.0.0.0",0,0
#ifconfig wwan0 192.168.20.2/24 up
#ifconfig wwan0 netmask 255.255.255.0 -arp up
#route add -net 192.168.3.0/24 gw 192.168.20.1
#ping 192.168.3.100

#pods id
#kubectl get pods -n oai |  cut -f 1 -d ' '  | grep oai-enb
#ip net3
#kubectl get pod oai-enb-858b6b6fc8-n2nxh -n oai -o yaml | grep 192.168.18
#kubectl get pods -n oai |  cut -f 1 -d ' '  | grep oai-enb | xargs kubectl -n oai -o yaml get pod | grep 192.168.18
#1.create a thread to read ips 2.select random one ip to send messages
#path: targets/ARCH/ETHERNET/USERSPACE/LIB/eth_udp.c
#https://gitlab.eurecom.fr/oai/openairinterface5g/-/blob/master/openair2/LAYER2/PROTO_AGENT/proto_agent.c
kubectl apply -f "${path}oai-spgwu-devel.yaml" --validate=false
sleep 20
kubectl apply -f "${path}oai-enb-devel.yaml" --validate=false
